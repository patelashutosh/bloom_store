// Bloom AI Flower Shop Database Schema
// Complete schema with NextAuth.js integration and flower shop models

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Required Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  
  // Delivery address fields
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?   @default("US")
  
  // User preferences
  newsletter    Boolean   @default(false)
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

// Flower Shop Models
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  slug        String    @unique
  imageUrl    String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id              String      @id @default(cuid())
  name            String
  description     String?
  price           Decimal     @db.Decimal(10, 2)
  imageUrl        String
  images          String[]    @default([])
  
  // Flower-specific fields
  flowerType      String?     // e.g., "Rose", "Tulip", "Lily"
  color           String?     // e.g., "Red", "White", "Pink"
  occasion        String?     // e.g., "Wedding", "Birthday", "Anniversary"
  seasonality     String?     // e.g., "Spring", "Summer", "Year-round"
  careInstructions String?    @db.Text
  
  // Inventory and availability
  stock           Int         @default(0)
  isAvailable     Boolean     @default(true)
  featured        Boolean     @default(false)
  
  // SEO and organization
  slug            String      @unique
  tags            String[]    @default([])
  
  // Relations
  categoryId      String
  category        Category    @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]
  reviews         Review[]
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("products")
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique @default(cuid())
  
  // Customer information
  userId            String?
  user              User?       @relation(fields: [userId], references: [id])
  
  // Guest checkout support
  guestEmail        String?
  guestName         String?
  guestPhone        String?
  
  // Order details
  items             OrderItem[]
  subtotal          Decimal     @db.Decimal(10, 2)
  tax               Decimal     @db.Decimal(10, 2) @default(0)
  shippingCost      Decimal     @db.Decimal(10, 2) @default(0)
  total             Decimal     @db.Decimal(10, 2)
  
  // Status and tracking
  status            OrderStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  trackingNumber    String?
  
  // Delivery information
  deliveryType      DeliveryType @default(STANDARD)
  deliveryDate      DateTime?
  deliveryTimeSlot  String?
  
  // Addresses
  shippingAddress   Json
  billingAddress    Json?
  
  // Special instructions
  specialInstructions String?   @db.Text
  cardMessage       String?
  
  // Payment
  paymentMethodId   String?
  stripePaymentIntentId String?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  
  // Relations
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  
  // Item details
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  
  // Snapshot of product details at time of order
  productName String
  productImage String
  
  createdAt   DateTime @default(now())

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Review content
  rating    Int      // 1-5 stars
  title     String?
  comment   String?  @db.Text
  
  // Moderation
  isVerified Boolean @default(false)
  isVisible  Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // One review per user per product
  @@map("reviews")
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum DeliveryType {
  STANDARD     // Regular delivery
  EXPRESS      // Same day delivery
  PICKUP       // Customer pickup
  SCHEDULED    // Specific date/time delivery
}
